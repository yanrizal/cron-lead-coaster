{"version":3,"sources":["../../src/routes/main.routes.js"],"names":[],"mappings":";;;;uBAAoB,SAAS;;;;0BACN,aAAa;;;;uBAChB,SAAS;;;;kBACd,IAAI;;;;qBACD,OAAO;;;;wBACJ,UAAU;;;;0BAEN,gBAAgB;;sBACtB,QAAQ;;;;sBACR,QAAQ;;;;4BACN,eAAe;;;;AAJpC,OAAO,CAAC,gBAAgB,CAAC,CAAC;;AAM1B,IAAM,UAAU,GAAG,wBAAW,IAAI,EAAE,CAAC;;;AAGrC,MAAM,CAAC,OAAO,GAAG,UAAC,GAAG,EAAE,QAAQ,EAAK;;AAEhC,KAAG,CAAC,GAAG,CAAC,GAAG,EAAE,UAAC,GAAG,EAAE,GAAG,EAAK;AACzB,OAAG,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,KAAK,EAAE,OAAO,EAAC,CAAC,CAAC;GACxC,CAAC,CAAC;;AAEH,KAAG,CAAC,IAAI,CAAC,WAAW,EAAE,UAAU,EAAE,UAAC,GAAG,EAAE,GAAG,EAAK;AAC9C,QAAM,MAAM,GAAG;AACb,cAAQ,EAAE,GAAG,CAAC,IAAI,CAAC,QAAQ;AAC3B,cAAQ,EAAE,GAAG,CAAC,IAAI,CAAC,QAAQ;KAC5B,CAAC;AACF,QAAI,0DAAwD,MAAM,CAAC,QAAQ,oBAAe,MAAM,CAAC,QAAQ,EAAI,UAAS,MAAM,EAAE,MAAM,EAAE;AACpI,aAAO,CAAC,GAAG,CAAC,cAAc,EAAE,MAAM,CAAC,CAAC;AACpC,aAAO,CAAC,GAAG,CAAC,iBAAiB,EAAE,MAAM,CAAC,CAAC;KACxC,CAAC,CAAC;AACH,OAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;GACd,CAAC,CAAC;;AAEH,KAAG,CAAC,IAAI,CAAC,eAAe,EAAE,UAAU,EAAE,UAAC,GAAG,EAAE,GAAG,EAAK;AAClD,WAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AACpB,QAAM,MAAM,GAAG;AACb,cAAQ,EAAE,GAAG,CAAC,IAAI,CAAC,QAAQ;AAC3B,cAAQ,EAAE,GAAG,CAAC,IAAI,CAAC,QAAQ;KAC5B,CAAC;AACF,WAAO,CAAC,GAAG,CAAC,YAAY,EAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;AAC1C,WAAO,CAAC,GAAG,CAAC,YAAY,EAAE,MAAM,CAAC,QAAQ,CAAC,CAAC;AAC3C,8BAAS,MAAM,EAAE,UAAC,GAAG,EAAE,QAAQ,EAAK;;AAElC,UAAM,KAAK,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC;AAC3C,UAAM,WAAW,GAAG,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC;AACpD,UAAM,SAAS,GAAG,QAAQ,CAAC;AAC3B,UAAM,GAAG,GAAG,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC;AACrC,UAAM,QAAQ,GAAG,oBAAO,cAAc,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;AACvD,UAAM,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC,WAAW,EAAE,KAAK,EAAE,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;;AAEvF,SAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;AACnB,UAAI,oCAAkC,MAAM,CAAC,QAAQ,oBAAe,MAAM,CAAC,QAAQ,iBAAY,KAAK,oBAAe,SAAS,EAAI,UAAS,MAAM,EAAE,MAAM,EAAE;;;OAGxJ,CAAC,CAAC;KACJ,CAAC,CAAC;GAEJ,CAAC,CAAC;CAGN,CAAC","file":"main.routes.js","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport request from 'request';\nimport fs from 'fs';\nimport chalk from 'chalk';\nimport passport from 'passport';\nrequire('shelljs/global');\nimport { findFile } from '../models/file';\nimport crypto from 'crypto';\nimport assert from 'assert';\nimport schedule from 'node-schedule';\n\nconst jsonParser = bodyParser.json();\n\n// app/routes.js\nmodule.exports = (app, passport) => {\n\n    app.get('/', (req, res) => {\n      res.render('index', { title: 'index'});\n    });\n\n    app.post('/startapi', jsonParser, (req, res) => {\n      const params = {\n        searchId: req.body.searchId,\n        username: req.body.username\n      };\n      exec(`./vendor/casperjs/bin/casperjs sample.js --searchId=${params.searchId} --username=${params.username}`, function(status, output) {\n        console.log('Exit status:', status);\n        console.log('Program output:', output);\n      });\n      res.json({});\n    });\n\n    app.post('/startapitest', jsonParser, (req, res) => {\n      console.log('exec');\n      const params = {\n        searchId: req.body.searchId,\n        username: req.body.username\n      };\n      console.log('searchId: ',params.searchId);\n      console.log('username: ', params.username);\n      findFile(params, (err, response) => {\n        //console.log(response);\n        const email = response.meta.linkedin.email;\n        const passwordEnc = response.meta.linkedin.password;\n        const algorithm = 'aes256'; // or any other algorithm supported by OpenSSL\n        const key = process.env.TOKEN_SECRET;\n        const decipher = crypto.createDecipher(algorithm, key);\n        const decrypted = decipher.update(passwordEnc, 'hex', 'utf8') + decipher.final('utf8');\n        //console.log(decrypted);\n        res.json(response);\n        exec(`casperjs sample.js --searchId=${params.searchId} --username=${params.username} --email=${email} --password=${decrypted}`, function(status, output) {\n          //console.log('Exit status:', status);\n          //console.log('Program output:', output);\n        });\n      });\n      \n    });\n\n    \n};\n\n\n\n\n"]}